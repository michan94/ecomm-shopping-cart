"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.load = load;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const path = require('path');

const fsUtils = require('./utils/fs');

const defaultConfig = {
  cacheDir: '.png-cache',
  scales: [1, 2, 3],
  output: {},
  ignoreRegex: null,
  lastModifiedTime: 0
};

async function load() {
  const metroConfigPath = path.join(process.cwd(), 'metro.config.js');
  const lastModifiedTime = Math.max(...(await Promise.all([fsUtils.getLastModifiedTime(metroConfigPath), fsUtils.getLastModifiedTime(__filename)])));
  let metroConfig;

  try {
    metroConfig = require(metroConfigPath);
  } catch (_unused) {
    metroConfig = {};
  }

  const transformerOptions = metroConfig.transformer || {};
  const svgAssetPluginOptions = transformerOptions.svgAssetPlugin || {};

  const config = _objectSpread(_objectSpread(_objectSpread({}, defaultConfig), svgAssetPluginOptions), {}, {
    lastModifiedTime
  });

  return config;
}